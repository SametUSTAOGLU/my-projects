AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Sample Template create a stack consists of EC2
  instance WebOTX Application Server is installed and RDS instance.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be a existing KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  EC2SecurityGroupInboundSource:
    Description: Source of Inbound to the EC2 instance.
    Type: String
    Default: 0.0.0.0/0
    ConstraintDescription: must be a IP address.
  RDSInstanceType:
    Description: RDS instance type
    Type: String
    Default: db.t2.micro
    AllowedValues:
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
    ConstraintDescription: must be a valid RDS instance type.
  DBName:
    Description: The database name
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    Description: The database admin account username
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: "true"
    Description: The database admin account password
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
Mappings:
  AWSRegionArch2AMI:
    ap-northeast-1:
      AMI: ami-f3bb9a94
    ap-southeast-1:
      AMI: NOT_YET_SUPPORTED
    ap-southeast-2:
      AMI: NOT_YET_SUPPORTED
Resources:
  WebAPServer:
    Type: AWS::EC2::Instance
    Metadata:
      Comment1: Configure the bootstrap helpers to modify WebOTX domains Configuration
    DependsOn: DBInstance
    Properties:
      ImageId:
        Fn::FindInMap:
          - AWSRegionArch2AMI
          - Ref: AWS::Region
          - AMI
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
        - Ref: EC2SecurityGroup
      KeyName:
        Ref: KeyName
      Tags:
        - Key: Name
          Value: CFn-WebOTX-EC2Instance
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |
                #!/bin/bash -x
              - |
                cd /root
              - |
                mkdir -p cfn_work
              - |
                cd cfn_work
              - |
                exec > >(tee /root/cfn_work/cfn_userdata.log) 2>&1
              - |
                date
              - >
                curl -L https://www.opscode.com/chef/install.sh | bash -s -- -v
                11.16.4
              - >
                curl -L
                http://jpn.nec.com/webotx/download/aws/webotx-as-sample-cookbook.zip
                > cookbooks.zip
              - |
                unzip cookbooks.zip
              - |
                cat <<EOF > roles/webotx-as-sample-linux.json
              - |
                {
              - |2
                    "name": "webotx-as-sample-linux",
              - |2
                    "default_attributes": { },
              - |2
                    "override_attributes": {
              - |2
                        "db" : {
              - '            "user":"'
              - Ref: DBUser
              - |
                ", 
              - '            "password":"'
              - Ref: DBPassword
              - |
                ", 
              - '            "url":"jdbc:postgresql://'
              - Fn::GetAtt:
                  - DBInstance
                  - Endpoint.Address
              - ":"
              - Fn::GetAtt:
                  - DBInstance
                  - Endpoint.Port
              - /
              - Ref: DBName
              - |
                " 
              - |2
                        }
              - |2
                    },
              - |2
                    "json_class": "Chef::Role",
              - |2
                    "description": "This is just a sample role.",
              - |2
                    "chef_type": "role",
              - |2
                    "run_list": [
              - |2
                        "recipe[webotx-sample::linux]" 
              - |2
                    ]
              - |
                }
              - |
                EOF
              - |
                chef-solo -c solo.rb -j init-linux.json
              - |
                chef_exit=$?
              - |
                if [ $chef_exit -eq 0 ]; then
              - "   curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\" :
                \"SUCCESS\","
              - '"Reason" : "Setup is done.",'
              - '"UniqueId" : "FindEmployeeWeb",'
              - "\"Data\" : \"Done\"}' "
              - '"'
              - Ref: WaitForInstanceWaitHandle
              - |
                "
              - |
                else
              - "   curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\" :
                \"FAILURE\","
              - '"Reason" : "Setup failure.",'
              - '"UniqueId" : "FindEmployeeWeb failure",'
              - "\"Data\" : \"Done\"}' "
              - '"'
              - Ref: WaitForInstanceWaitHandle
              - |
                "
              - |
                fi
              - |
                date
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: "5"
      DBInstanceClass:
        Ref: RDSInstanceType
      DBInstanceIdentifier:
        Fn::Join:
          - ""
          - - CFn-WebOTX-RDSInstance-
            - Ref: AWS::StackName
      DBName:
        Ref: DBName
      Engine: postgres
      EngineVersion: 9.4.7
      MasterUsername:
        Ref: DBUser
      MasterUserPassword:
        Ref: DBPassword
      VPCSecurityGroups:
        - Fn::GetAtt:
            - RDSSecurityGroup
            - GroupId
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow access to 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp:
            Ref: EC2SecurityGroupInboundSource
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow access to 5432 from EC2SecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "5432"
          ToPort: "5432"
          SourceSecurityGroupId:
            Fn::GetAtt:
              - EC2SecurityGroup
              - GroupId
  WaitForInstanceWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
  WaitForInstance:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: WebAPServer
    Properties:
      Handle:
        Ref: WaitForInstanceWaitHandle
      Timeout: "3600"
Outputs:
  WebsiteURL:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - WebAPServer
              - PublicDnsName
          - /FindEmployeeWeb/
    Description: URL for sample application
